- hosts: localhost
  gather_facts: yes 
  vars_files:
    - mycred.yml

  vars:
    ansible_python_interpreter: /usr/bin/python3.8
    myport: 81
    region: us-east-2
    subnet:
      - subnet-c0e9c88c
    sg: websg
    type: t2.micro
    number: 1
    key: infra 
    id: []
    ip: []

  tasks:
    - name: installing python
      package:
        name: python3.8
        state: present
    - name: installing boto3
      pip:
        name: boto3
        state: present

    - name: create security group
      ec2_group:
        name: "{{ sg }}"
        description: The webserver security group
        region: "{{ region }}"
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: "{{ myport }}"
            to_port: "{{ myport }}"
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: launching EC2 instance
      loop: "{{ subnet }}"
      ec2:
        key_name: "{{ key }}"
        instance_type: "{{ type }}"
        image: ami-0b9064170e32bde34
        region: us-east-2
        group: "{{ sg }}" 
        wait: yes
        count: "{{ number }}"
        vpc_subnet_id: "{{ item }}"
        assign_public_ip: yes
        state: present
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        instance_tags:
          Name: webserver
      register: ec2

    - set_fact:
        ip: "{{ ip + item['instances'] }}"
      with_items:
        - "{{ ec2.results }}"
      
    - debug:
        msg: "{{ item.public_ip }}"
      with_items: "{{ ip }}"

    - name: Add new instance to host group
      add_host: 
         hostname: "{{ item.public_ip }}"
         groupname: webserver
      loop: "{{ ip }}"

    - name: Wait for SSH to come up
      wait_for: 
        host: "{{ item.public_dns_name }}" 
        port: 22  
        state: started
      loop: "{{ ip }}"

- hosts: webserver 
  gather_facts: no
  tasks:
    - command:  curl http://ipv4.icanhazip.com
      register: x
    - debug:
        var:  x.stdout

    - name: Pass variables to role
      include_role:
        name: httpdserver
      vars:
        my_ip: x.stdout

- hosts: localhost
  gather_facts: no
  vars_files:
    - mycred.yml

  vars:
    region: ap-south-1
    sg: websg
    myport: 81

  tasks:
    - name: create Load Balancer AWS
      ec2_elb_lb:
        name: ec2-lb
        state: present
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        cross_az_load_balancing: yes
        zones:
          - "{{ region }}a"
          - "{{ region }}b"
          - "{{ region }}c"
        scheme: internet-facing 
        security_group_names: "{{ sg }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: "{{ myport }}"
        health_check:
          ping_protocol: http
          ping_port: "{{ myport }}"
          ping_path: "/index.php"
          response_timeout: 5 
          interval: 30
          unhealthy_threshold: 2
          healthy_threshold: 10

    - name: add webservers to AWS ELB
      local_action: ec2_elb
      args:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        instance_id: "{{ item }}"
        ec2_elbs: ec2-lb
        state: present
        region: "{{ region }}"
      loop: "{{ id }}" 
